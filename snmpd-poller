#!/usr/bin/perl

use strict;
no strict "refs";
use warnings;

use NetSNMP::OID (':all');
use IPC::SysV qw(IPC_PRIVATE IPC_RMID S_IRWXU);
use Socket;
use POSIX ":sys_wait_h";
use Time::HiRes qw(gettimeofday);
use Sys::Syslog qw(:standard :macros);
use File::Basename;

our $subAgentDir=( fileparse($0) )[1];
require "${subAgentDir}common";

our %oDescr;
our $shm_size;
our $poller_cycle;
our $cmd_timeout;


$SIG{HUP}='readConfig';

{
  my %otree = (); 
  my %fStatus = (); 
  my $shm_message;
  my $shm_id = $ARGV[0];
  my $start_time;
  our $log_to_console = 1 if $shm_id eq 'debug';
  logMessage(LOG_INFO, "Starting snmpd-poller");
  readConfig(); 

	while (1) { 
    logMessage(LOG_DEBUG, "polling with $poller_cycle s interval");
    %fStatus = ('functionsCount'=>0,'functionsSuccessCount'=>0, 'functionsFailedCount'=>0, 'timeStamp'=>scalar gettimeofday(), 'totalExecTime'=>$0);
    %otree = (); 

    foreach my $i (keys %oDescr) {
      my ($bi,$func) = unpack('d a*', $i);
      print "$func $bi \n"; 
      $fStatus{'functionsCount'} += 1;  
      if ( &$func( $bi, \%otree, @{$oDescr{$i}} ) == 0 ) {$fStatus{'functionsSuccessCount'} += 1} else {$fStatus{'functionsFailedCount'} += 1}
    } 

#   add pollerInfo
    pollerInfo(\%otree,\%fStatus);
    $shm_message = pack( 'S(S/A* S/A*)*', scalar keys( %otree ), %otree );
#    while (my ($k,$v) = each %otree) { logMessage(LOG_DEBUG, "otree: $k => $v" );}

    my %oData;
      my @sortedoids = unpackMessage( $shm_message, \%oData );
      foreach my $o (@sortedoids) {
        my ( $t, $v ) = unpackOData($oData{$o});
        logMessage(LOG_DEBUG, "otree: $o = $t , $v" );
      }
    if ( $shm_id ne 'debug' ) {
      unless(shmwrite($shm_id, $shm_message, 0, $shm_size-1))
        { logMessage(LOG_ERR, "can't write to shared memory"); }
    }
    my ($rin, $rout)  = ('', '');
    vec($rin, fileno(STDIN), 1) = 1;
    my ($nfound, $timeleft) = select($rout=$rin, undef, undef, $poller_cycle);
    if ($nfound == 1 && $shm_id ne 'debug' ) {
        shmctl($shm_id, IPC_RMID, 0);
        logMessage(LOG_INFO, "Connection lost with snmpd code=$nfound, shutting down");
        exit; 
    }
  }
}

sub fmtRes {
  my $base=shift;
  my $cmd=shift;
  my $t=shift;
  my @r=@_;
  return sprintf ("%s!%.130s!%.3f!0!", $base, $cmd, $t) . join("!",@r) . ";"; 
}

sub pollerInfo {
  my $o=shift;
  my $f=shift;
  $$f{'totalExecTime'}=scalar gettimeofday - $$f{'timeStamp'};
  while ( my($k,$v) = each  %$f ){ $$o{$k}=$v; }
  return 0;
} 
