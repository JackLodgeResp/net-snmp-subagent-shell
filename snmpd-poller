#!/usr/bin/perl

use strict;
no strict "refs";
use warnings;

use NetSNMP::OID (':all');
use NetSNMP::ASN qw(ASN_OCTET_STR);
use IPC::SysV qw(IPC_PRIVATE IPC_RMID S_IRWXU);
use Socket;
use POSIX ":sys_wait_h";
use Time::HiRes qw(gettimeofday);
use Sys::Syslog qw(:standard :macros);
use File::Basename;

our $subAgentDir=( fileparse($0) )[1];
require "${subAgentDir}common";

our %oDescr;
our $shm_size;
our $poller_cycle;
our $cmd_timeout;

$SIG{HUP}='readConfig';

{
# shm_message format:
# <oid suffix>:<cmd>:<time spent>:<return code>:<result 1>:<result N>;
  my $shm_message = ''; 
  my $shm_id = $ARGV[0];
  our $log_to_console = 1 if $shm_id eq 'debug';
  logMessage(LOG_INFO, "Starting snmpd-poller");
  readConfig(); 
# init pollerInfo
  my $start_time=gettimeofday();
  $shm_message="$start_time;" . pollerInfo( $start_time );
  if ( $shm_id ne 'debug' ) {
    unless(shmwrite($shm_id, $shm_message, 0, $shm_size-1))
        { logMessage(LOG_ERR, "can't write to shared memory"); }
  }
	while (1) { 
    logMessage(LOG_DEBUG, "polling with $poller_cycle s interval");
    $start_time = gettimeofday();
    $shm_message = "$start_time;"; 
    foreach my $i (keys %oDescr) {
      $shm_message.=&{$oDescr{$i}->[0]}($i, $oDescr{$i}->[1]);
    } 
#   add pollerInfo
    $shm_message.=pollerInfo($start_time, scalar gettimeofday());

    logMessage(LOG_DEBUG, "shared memory message: $shm_message");
    if ( $shm_id eq 'debug' ) {
      my %oData;
      unpackMessage ($shm_message, \%oData);
      my @sortedoids = (sort { new NetSNMP::OID($a)<=>new NetSNMP::OID($b) } ( keys %oData ) );
      print "produced SNMP tree:\n";
      foreach my $o (@sortedoids) {
        print "$o = $oData{$o}\n";
      }
    }
    else {
      unless(shmwrite($shm_id, $shm_message, 0, $shm_size-1))
        { logMessage(LOG_ERR, "can't write to shared memory"); }
    }
    my ($rin, $rout)  = ('', '');
    vec($rin, fileno(STDIN), 1) = 1;
    my ($nfound, $timeleft) = select($rout=$rin, undef, undef, $poller_cycle);
    if ($nfound == 1 && $shm_id ne 'debug' ) {
        shmctl($shm_id, IPC_RMID, 0);
        logMessage(LOG_INFO, "Connection lost with snmpd code=$nfound, shutting down");
        exit; 
    }
  }
}

sub fmtRes {
  my $base=shift;
  my $cmd=shift;
  my $t=shift;
  my @r=@_;
  return sprintf ("%s!%.130s!%.3f!0!", $base, $cmd, $t) . join("!",@r) . ";"; 
}

#Poller info mib:
# base! 1000, cmd! PStat, time, start time
sub pollerInfo {
  my $st=shift;
  my $ft=shift;
  my $t=($st and $ft)?sprintf ("%.3f",$ft-$st):'-1';
  return fmtRes('1000', 'PStat', $t, $st);
} 

